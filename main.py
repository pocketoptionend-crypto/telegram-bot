import os
import logging
import random
import threading
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
app_flask = Flask(__name__)

@app_flask.route('/')
def home():
    return "‚úÖ Bot is running on Render!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app_flask.run(host="0.0.0.0", port=port)


# --- Telegram Bot ---
TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –≤ Render ‚Üí Environment
CHANNEL_ID = -1002208073820     # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª
ADMIN_ID = 1781318354           # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

participants = set()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_main_menu(user_id):
    buttons = [[InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join")]]
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="list")])
        buttons.append([InlineKeyboardButton("üé≤ –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", callback_data="winner")])
        buttons.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="reset")])
        buttons.append([InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –∫–∞–Ω–∞–ª", callback_data="send_button")])
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=get_main_menu(update.effective_user.id))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if query.data == "join":
        participants.add(username)
        await query.edit_message_text("–¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å! üéâ", reply_markup=get_main_menu(user_id))

    elif query.data == "list" and user_id == ADMIN_ID:
        text = "üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(participants) if participants else "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        await query.edit_message_text(text, reply_markup=get_main_menu(user_id))

    elif query.data == "winner" and user_id == ADMIN_ID:
        text = f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {random.choice(list(participants))}" if participants else "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        await query.edit_message_text(text, reply_markup=get_main_menu(user_id))

    elif query.data == "reset" and user_id == ADMIN_ID:
        participants.clear()
        await query.edit_message_text("üîÑ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=get_main_menu(user_id))

    elif query.data == "send_button" and user_id == ADMIN_ID:
        join_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join")]])
        await context.bot.send_message(chat_id=CHANNEL_ID, text="üöÄ –†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–∫—Ä—ã—Ç! –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=join_button)
        await query.edit_message_text("–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª üì¢", reply_markup=get_main_menu(user_id))

def run_bot():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    run_bot()
